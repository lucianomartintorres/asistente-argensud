from fastapi import FastAPI, Query
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import pandas as pd
import os
from dotenv import load_dotenv

load_dotenv()

app = FastAPI()

# Permitir CORS para que se pueda acceder desde Wix o cualquier frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Cargar el archivo Excel al iniciar
df = pd.read_excel("Argensud_Menu_12.xlsx")

# Normalizaci√≥n de texto
def normalizar(texto):
    if pd.isna(texto):
        return ""
    return str(texto).strip().lower().replace("√°", "a").replace("√©", "e").replace("√≠", "i").replace("√≥", "o").replace("√∫", "u")

# Endpoint antiguo (para filtros exactos)
@app.get("/buscar_platos")
def buscar_platos(filtros: list[str] = Query(default=[])):
    resultados = []
    for _, fila in df.iterrows():
        texto_busqueda = (
            normalizar(fila.get("Secci√≥n", "")) + " " +
            normalizar(fila.get("Alias", "")) + " " +
            normalizar(fila.get("Tags", ""))
        )
        if all(normalizar(palabra) in texto_busqueda for palabra in filtros):
            resultados.append({
                "nombre": fila.get("Nombre del plato", "").strip(),
                "descripcion": fila.get("Descripci√≥n", ""),
                "precio": fila.get("Precio ($)", ""),
                "id": fila.get("ID", "")
            })
    return {"platos": resultados}

# Modelo para /chat
class RequestData(BaseModel):
    mensaje: str

# Nuevo endpoint estilo conversacional
@app.post("/chat")
def chat(request: RequestData):
    texto = normalizar(request.mensaje)

    if not texto:
        return {"respuesta": "¬øPod√©s repetir tu pregunta?"}

    saludos = ["hola", "buenas", "qu√© tal", "buen d√≠a", "buenas noches", "c√≥mo est√°s"]
    if any(saludo in texto for saludo in saludos):
        return {"respuesta": "¬°Hola! ¬øQuer√©s que te muestre algunas opciones de nuestra carta? Pod√©s decirme si ten√©s ganas de picar algo, comer carne, una pizza o tomar algo."}

    if any(palabra in texto for palabra in ["m√°s info", "detalle", "descripci√≥n", "qu√© trae", "qu√© tiene"]):
        return {"respuesta": "¬øDe qu√© plato te gustar√≠a que te cuente m√°s? Pod√©s decirme el nombre y te doy los detalles üòä"}

    if any(palabra in texto for palabra in ["precio", "cu√°nto", "vale", "sale"]):
        return {"respuesta": "Decime el nombre del plato y te digo el precio üòâ"}

    resultados = []
    for _, fila in df.iterrows():
        texto_busqueda = (
            normalizar(fila.get("Secci√≥n", "")) + " " +
            normalizar(fila.get("Alias", "")) + " " +
            normalizar(fila.get("Tags", ""))
        )
        if any(palabra in texto_busqueda for palabra in texto.split()):
            resultados.append({
                "nombre": fila.get("Nombre del plato", "").strip(),
                "descripcion": fila.get("Descripci√≥n", ""),
                "precio": fila.get("Precio ($)", ""),
                "id": fila.get("ID", "")
            })

    if resultados:
        nombres = [f"- {plato['nombre']}" for plato in resultados[:5]]
        texto_respuesta = "Mir√° estas opciones que encontr√© para vos:\n\n" + "\n".join(nombres)
        texto_respuesta += "\n\n¬øQuer√©s que te cuente m√°s sobre alguno? O si quer√©s, te sugiero algo seg√∫n lo que tengas ganas üòÑ"
        return {"respuesta": texto_respuesta.strip()}

    return {"respuesta": "No encontr√© nada con esas palabras üòì. Prob√° diciendo algo como carne, pizza, postre o bebida."}
